using System;
using System.Collections.Generic;
using System.Reflection.Metadata.Ecma335;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace Baitap1
{
    class Program
    {
        static int[] array;
        static void print()
        {
            foreach (var i in array)
                Console.Write(i + " ");
            Console.WriteLine();
        }

        static void Main(string[] args)
        {
            //Console.OutputEncoding = Encoding.UTF8;
            menu();
        }



        public static void menu()
        {
            int option = 0;
            do
            {

                Console.WriteLine("\n");

                Console.WriteLine("1.create array ");
                Console.WriteLine("2.check is symmetry array");
                Console.WriteLine("3.sort array");
                Console.WriteLine("4.find");
                Console.WriteLine("5.Exit");
                Console.Write("Input number: ");

                if (int.TryParse(Console.ReadLine(), out int number))
                {
                    option = number;
                }
                if (option > 5 || option < 1)
                {
                    Console.Clear();
                }
            }
            while (option > 5 || option < 1);

            Process(option);
            static void Process(int opt)
            {
                Console.Clear();
                switch (opt)
                {
                    case 1:
                        {
                            Console.Write("nhap size:");
                            int size = int.Parse(Console.ReadLine());
                            array = a.createArray(size, 30, 60);
                            print();



                            break;
                        }
                    case 2:
                        {
                            print();
                            if (a.isSymmetryArray(array) == true)
                                Console.WriteLine("Array is symmetry");
                            else
                                Console.WriteLine("Array is not symmetry");
                            break;
                        }
                    case 3:
                        {
                            print();
                            a.insertionSort(array);

                            Console.WriteLine("Array after arrangement");
                            print();
                            break;
                        }
                    case 4:
                        {
                            print();

                            Console.Write("nhap:");
                            int number = int.Parse(Console.ReadLine());
                            if (a.BinarySearch(array, number) == -2)
                                Console.Write("Array must be ascending");
                            else if(a.BinarySearch(array, number) == -1)
                                Console.Write("Not Find!");
                            else
                                Console.Write($"{number} appear at position: {a.BinarySearch(array, number)}");






                            break;
                        }
                    case 5:
                        {
                            Environment.Exit(Environment.ExitCode);
                            break;
                        }

                }
                menu();
            }




        }



    }
    class a
    {
        public static void Print()
        {

        }
        public static int[] createArray(int size, int a, int b)
        {


            int[] arr = new int[size];
            Random r = new Random();
            for (int i = 0; i < size; i++)
            {
                arr[i] = r.Next(a, b);
            }
            return arr;
        }

        public static int BinarySearch(int[] array, int key)
        {

            for (int i = 1; i < array.Length; i++)
            {
                if (array[i] < array[i - 1])

                    return -2;

            }


            int min = 0;
            int max = array.Length - 1;
            while (min <= max)
            {
                int mid = (min + max) / 2;
                if (key == array[mid])
                {
                    return ++mid;
                }
                else if (key < array[mid])
                {
                    max = mid - 1;
                }
                else
                {
                    min = mid + 1;
                }
            }
            return -1;
        }

        public static bool isSymmetryArray(int[] arr)
        {


            for (int i = 0; i < arr.Length / 2; i++)
            {
                if (arr[i] == arr[arr.Length - 1 - i])
                    return true;

            }

            return false;
        }

        public static void insertionSort(int[] arr)
        {

            int a, temp;

            for (int i = 0; i < arr.Length - 1; i++)
            {

                a = i;

                for (int j = i + 1; j < arr.Length; j++)
                {
                    if (arr[j] < arr[a])
                    {

                        a = j;
                    }
                }


                if (a != i)
                {
                    temp = arr[i];
                    arr[i] = arr[a];
                    arr[a] = temp;
                }
            }
        }


    }


}
